#!/bin/bash

dotfilesPath="~/Github/MyDotFiles"

# Verifica que el usuario no sea root
if [ "$(whoami)" == "root" ]; then
  exit 1
fi

# Actualiza la base de datos de paquetes y el sistema
# sudo pacman -Syu

# Lista de paquetes a instalar
packages=(
  bat  bspwm  clipit  dunst  feh  firefox  flameshot
  flatpak  git  git-lfs  htop  i3lock-fancy-git  kitty  lolcat
  lsd  lxappearance  mdcat  neofetch  neovim  onefetch  picom
  playerctl  pokemon-colorscripts-git  polybar  ranger  rofi
  sxhkd  thunar  thunar-volman  wget  xorg-xsetroot  xorg-xinput vlc zsh unzip
  xrandr sddm pamixer mpd mpc 
)

extra_packages=(
  ani-cli  arandr  gparted  lftp  nano
  noto-fonts  noto-fonts-cjk  noto-fonts-emoji
  noto-fonts-extra   scrcpy  sddm-theme-corners-git
  sddm-chinese-painting-theme ttf-dejavu
  urbanlifestyle-sddm-theme  vim  zip
)

###
###
###
ask_yn() {
    while true; do
        read -p "$1 (y/n): " yn
        case $yn in
            [Yy]* ) return 0;;  # Return 0 (success) for yes
            [Nn]* ) return 1;;  # Return 1 (failure) for no
            * ) echo "Please answer y or n.";;
        esac
    done
}
###
###
###

# Instalar paru si no está instalado
install_paru(){
  if ! command -v paru &>/dev/null; then
      echo "\n>> Instalando paru (AUR helper)...\n"
      git clone https://aur.archlinux.org/paru.git
      cd paru
      makepkg -si
      cd ..
      rm -rf paru
  fi
}

# Instalar yay si no está instalado
install_yay(){
  if ! command -v yay &> /dev/null; then
    echo "\n>> Instalando yay (AUR helper)...\n"
    sudo pacman -Syu --needed base-devel git
    git clone https://aur.archlinux.org/yay.git ~/yay
    (cd ~/yay && makepkg -si)
  fi
}

# Instala los paquetes
install_packages(){
  echo "\n>> Instalando o actualizando paquetes...\n"
  for package in "${packages[@]}"
  do
    # Verifica si el paquete está instalado
    if ! paru -Q "$package" >/dev/null; then
      paru -S --needed "$package" --noconfirm
    else
      echo "\nPaquete ${package} instalado"
    fi
  done
}

# Función para instalar el repositorio de blackarch
install_blackarch_repo(){
  # Instalando Repositorio de Blackarch
  echo "\n>> Instalando repositorio de BlackArch...\n"
  curl -O https://blackarch.org/strap.sh
  chmod +x strap.sh
  sudo ./strap.sh
}

copy_files(){
  local dotfilesPathBspwm="$dotfilesPath/BSPWM"
  echo "\n>> Copiando archivos de configuración...\n"

  cp -r $dotfilesPathBspwm/.config/bspwm ~/.config/
  cp -r $dotfilesPathBspwm/.config/neofetch ~/.config/
  cp -r $dotfilesPathBspwm/.config/rofi ~/.config/
  cp -r $dotfilesPathBspwm/.config/kitty/ ~/.config/
  cp -r $dotfilesPathBspwm/.config/jgmenu/ ~/.config/
  cp -r $dotfilesPathBspwm/.config/ranger/ ~/.config/
  cp $dotfilesPathBspwm/.config/wallpaper.conf ~/.config/
  cp $dotfilesPathBspwm/.config/.zshrc ~/
  
  [ ! -d ~/.local/share/fonts ] && mkdir -p ~/.local/share/fonts
  [ ! -d ~/.local/share/icons ] && mkdir -p ~/.local/share/icons
  [ ! -d ~/.local/share/themes ] && mkdir -p ~/.local/share/themes
  [ ! -d ~/.local/share/rofi ] && mkdir -p ~/.local/share/rofi

  mkdir ~/.local/share/fonts/Hack
  unzip $dotfilesPathBspwm/.local/share/fonts/HackNerdFont.zip -d ~/.local/share/fonts/Hack
  tar xfv $dotfilesPathBspwm/.local/share/icons/Simp1e-Tokyo-Night-Storm.tgz
  mv $dotfilesPathBspwm/.local/share/icons/Simp1e-Tokyo-Night-Storm ~/.local/share/icons
  unzip $dotfilesPathBspwm/.local/share/icons/Tokyonight-Dark-Icons.zip -d ~/.local/share/icons
  unzip $dotfilesPathBspwm/.local/share/themes/Tokyonight-Storm-B.zip -d ~/.local/share/themes
  cp -r $dotfilesPathBspwm/.local/share/rofi -d ~/.local/share/
}

# Directorio de respaldo para la configuración existente
BACKUP_DIR="$HOME/backup_$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR"

backup_files_and_copy_dots() {
    local src=$1
    local dest=$2
    if [ -e "$dest" ]; then
        echo "Backing up existing $(basename "$dest") to $BACKUP_DIR"
        mv "$dest" "$BACKUP_DIR"
    fi
    cp -rf "$src" "$dest"
}


# <---------------------------------------Funciones de Instalación--------------------------------------->


# Bare Install (START) #
config(){
  git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME $@
}

bare_install(){
  git clone --bare https://github.com/Panther-14/MyDotFiles.git $HOME/.dotfiles
  mkdir -p .config-backup
  config checkout
  if [ $? = 0 ]; then
    echo "Checked out config.";
  else
    echo "Backing up pre-existing dot files.";
    config checkout 2>&1 | egrep "\s+\." | awk {'print $1'} | xargs -I{} mv {} .config-backup/{}
  fi;
  config checkout
  config config status.showUntrackedFiles no
}

# Bare Install (END) #

# Instalar bspwm
install_bspwm(){
  # Creando carpeta de Dotfiles
  echo "\n>> Clonando Repositorio\n"
  cd
  mkdir Github
  cd Github/
  git clone --depth=1 https://github.com/Panther-14/MyDotFiles.git
  
  # Instalar paru como AUR helper
  install_paru

  # Instalar o actualizar paquetes
  install_packages

  # Cambia el shell del usuario actual a zsh
  echo "\n>> Cambiando shell...\n" 
  chsh -s "$(which zsh)"

  # Instalar Oh My Zsh para el usuario actual
  echo "\n>> Instalando Oh My Zsh...\n"
  sh -c "$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"

  # Instalar plugins zsh
  echo "\n>> Instalando plugins omz...\n"
  git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
  git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions

  # Copiamos configuración
  copy_files

  # Configuramos el Tema de Rofi
  echo "\n>> Seleccionar tema para rofi...\n"
  rofi-theme-selector

  # Removiendo Repositorio
  echo "\n>> Limpiando archivos...\n"
  rm -rf ~/Github

  # Mensaje de Instalado
  echo "\n>> Proceso de instalación y configuración completado.\n"
  notify-send "BSPWM INSTALADO"
}

# Instalar hyprland
install_hyprland(){
  local dotfilesPathHypr="$dotfilesPath/HYPRLAND" 
  # Creando carpeta de Dotfiles
  echo "\n>> Clonando Repositorio\n"
  cd
  mkdir Github
  cd Github/
  git clone --depth=1 https://github.com/Panther-14/MyDotFiles.git

  # Instalar paru como AUR helper
  install_paru

  # Instalar o actualizar paquetes
  install_packages

  # Cambia el shell del usuario actual a zsh
  echo "\n>> Cambiando shell...\n" 
  chsh -s "$(which zsh)"

  # Instalar Oh My Zsh para el usuario actual
  echo "\n>> Instalando Oh My Zsh...\n"
  sh -c "$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"

  # Instalar plugins zsh
  echo "\n>> Instalando plugins omz...\n"
  git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
  git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions


  # Copiamos configuración
  backup_files_and_copy_dots "$dotfilesPathHypr/.config/" "$HOME/.config/"

  backup_files_and_copy_dots "$dotfilesPathHypr/.zshrc" "$HOME/.zshrc"

  [ ! -d ~/.local/share/fonts ] && mkdir -p ~/.local/share/fonts
  [ ! -d ~/.local/share/icons ] && mkdir -p ~/.local/share/icons
  [ ! -d ~/.local/share/themes ] && mkdir -p ~/.local/share/themes
  [ ! -d ~/.local/share/rofi ] && mkdir -p ~/.local/share/rofi

  mkdir ~/.local/share/fonts/Hack
  unzip $dotfilesPathHypr/.local/share/fonts/HackNerdFont.zip -d ~/.local/share/fonts/Hack
  tar xfv $dotfilesPathHypr/.local/share/icons/Simp1e-Tokyo-Night-Storm.tgz
  mv $dotfilesPathHypr/.local/share/icons/Simp1e-Tokyo-Night-Storm ~/.local/share/icons
  unzip $dotfilesPathHypr/.local/share/icons/Tokyonight-Dark-Icons.zip -d ~/.local/share/icons
  unzip $dotfilesPathHypr/.local/share/themes/Tokyonight-Storm-B.zip -d ~/.local/share/themes
  cp -r $dotfilesPathHypr/.local/share/rofi -d ~/.local/share/

  # Removiendo Repositorio
  echo "\n>> Limpiando archivos...\n"
  rm -rf ~/Github

  # Mensaje de Instalado
  echo "\n>> Proceso de instalación y configuración completado.\n"

}

# <---------------------------------------Instalación--------------------------------------->

case "$1" in
  --bspwm)
    case "$2" in
    --black)
      echo "\n>> Instalación BlackArch seleccionada.\n"
      install_blackarch_repo
      install_bspwm
    ;;
    --white|*)
      echo "\n>> Instalación base seleccionada.\n"
      install_bspwm
    ;;
    esac
  ;;
  --hyprland)
    case "$2" in
    --black)
      echo "\n>> Instalación BlackArch seleccionada.\n"
      install_blackarch_repo
      install_hyprland
    ;;
    --white|*)
      echo "\n>> Instalación base seleccionada.\n"
      install_hyprland
    ;;
    esac
  ;;
  *)
    echo "\n Debes seleccionar un entorno (hyprland/bspwm)\n"
  ;;
esac